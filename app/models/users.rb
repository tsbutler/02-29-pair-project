class User < ActiveRecord::Base

  #generates an Array of input errors
  #
  #returns Array of Strings
  def set_errors
    @errors = []

    if self.name == nil || self.name == ""
      @errors << "Name cannot be blank."
    end
    if self.username == nil || self.username == ""
      @errors << "Username cannot be blank."
    end
    if self.email == nil || self.email == ""
      @errors << "Email cannot be blank."
    end
    if self.password == nil || self.password == ""
      @errors << "Password cannot be blank."
    end
    if self.budget == nil || self.budget == ""
      @errors << "Budget cannot be blank."
    end
  end

  #tells user whether input to form is valid
  #
  #returns Boolean true or false
  def is_valid?
    self.set_errors

    if @errors.length > 0
      return false
    else
      return true
    end
  end

  #returns Array generated by set_errors method
  #
  #returns @errors Array of Strings
  def get_errors
    self.set_errors
    return @errors
  end

  #Returns a collection of the user's choice objects
  #
  #Returns an Array of Objects
  def get_choices(user_id)
    @choices = Choice.where("user_id" => user_id)
    return @choices
  end

  #Returns an Array of destination IDs associated with the user's choices
  #
  #Returns an Array of Integers
  def get_destination_ids(user_id)
    @destination_ids = []
    @user_object = User.find_by_id(user_id)
    @choices = @user_object.get_choices(user_id)
    @choices.each do |choice|
      @destination_ids << choice.destination_id
    end
    return @destination_ids
  end

  #Returns an Array of airport_codes associated with the user's choices
  #
  #Returns an Array of Strings
  def get_airport_codes(user_id)
    @airport_codes = []
    @user_object = User.find_by_id(user_id)
    @destinations = @user_object.get_destination_ids(user_id)
    @destinations.each do |destination|
      location = Destination.find_by_id(destination)
      @airport_codes << location.airport_code
    end
    return @airport_codes
  end

end